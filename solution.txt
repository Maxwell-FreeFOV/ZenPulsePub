项目技术文档：经文念诵进度跟踪 Web 应用开发

目录
1. 引言
2. 项目需求
3. 技术方案
4. 结论

1. 引言
本项目旨在开发一款基于 Web 的经文念诵进度跟踪应用，帮助用户在念诵经文时自动跟踪进度，并在前端直观显示已读和未读的经文部分。该应用主要面向手机端用户，利用 Web 和 HTML5 技术，实现跨平台的便捷使用。

2. 项目需求
2.1 功能需求
- 经文展示：清晰展示经文内容，支持经文选择。
- 进度跟踪：通过木鱼点击或语音识别自动跟踪念诵进度。
- 高亮显示：已读经文和当前行使用不同颜色高亮显示。
- 跨平台支持：确保在不同设备和浏览器上的兼容性。

2.2 技术需求
- 响应式设计：适应不同屏幕尺寸的设备。
- 性能优化：确保应用在移动设备上运行流畅。
- 音频处理：实现实时语音识别和进度跟踪。

3. 技术方案
3.1 前端开发
- HTML5 + CSS3：构建响应式用户界面。
- JavaScript：实现交互逻辑和音频处理。
- Web Audio API：捕获和处理实时音频。
- IndexedDB：存储用户数据和录音。

3.2 核心功能实现
- 经文展示：
  - 使用 JavaScript 动态加载和分段显示经文。
  - 实现经文滚动和当前行高亮功能。

- 进度跟踪：
  - 木鱼模式：点击按钮手动更新进度。
  - 语音识别模式：
    * 使用 Web Audio API 和 Meyda 库进行实时音频分析
    * 实现 VAD（Voice Activity Detection）检测
    * 自动调整到最近的句子边界
    * 使用固定阈值和动态阈值结合的方式进行音节检测

- 音频特征处理：
  - 多特征组合判断：
    * 基础能量阈值：固定阈值过滤微弱声音
    * 动态能量阈值：基于均值和标准差的自适应判断
    * 能量突变检测：检测相邻帧之间的能量比值变化
    * 过零率：使用动态阈值进行语音特征判断
  - 特征归一化：
    * CMVN：消除通道效应
    * VTLN：补偿声道差异
  - 缓冲区管理：
    * 使用滑动窗口处理音频特征
    * 支持可配置的缓冲区大小
    * 实时更新特征数据

- 音节检测算法：
  - 基础能量检查：过滤低能量信号
  - 能量水平检查：确保整体能量足够高
  - 能量突变检查：检测音节起始
  - 过零率验证：区分语音和噪声
  - 组合判断逻辑：
    * 要求能量水平足够高或有明显突变
    * 同时要求过零率在合理范围内
    * 通过参数调节面板实时调整判断条件

- 可视化功能：
  - 实时波形显示：
    * 增加波形振幅显示比例（3倍）
    * 更清晰的波形展示
  - 特征曲线显示：
    * MFCC曲线（绿色，4倍放大）
    * 能量曲线（红色，3倍放大）
    * 过零率曲线（蓝色，2倍放大）
  - VAD检测点标记：
    * 使用红色竖线标记检测点
    * 实时滚动显示

3.3 性能优化
- 使用 CSS transitions 实现平滑的视觉效果。
- 采用事件委托减少事件监听器数量。
- 使用 Web Worker 处理复杂计算，避免阻塞主线程。

3.4 跨平台兼容
- 使用响应式设计适应不同屏幕尺寸。
- 处理触摸事件，优化移动端体验。
- 进行跨浏览器测试，确保兼容性。

3.5 音频处理优化
- 特征提取：
  - MFCC特征处理：
    * CMVN归一化：消除通道效应
    * VTLN归一化：补偿声道差异
  - 能量特征：
    * 固定阈值：基础噪音过滤
    * 动态阈值：自适应能量判断
  - 过零率分析：
    * 动态阈值计算
    * 语音/非语音判断
  - 特征缓冲：
    * 可配置的缓冲区大小
    * 滑动窗口处理
    * 实时特征更新

3.6 用户体验优化
- 参数调节界面：
  - 音节检测参数：
    * 能量阈值系数：控制动态阈值灵敏度
    * 能量突变比例：控制突变检测灵敏度
  - 特征提取参数：
    * MFCC缓冲区大小：控制特征归一化窗口
    * 特征窗口大小：控制特征提取的时间跨度
  - 实时参数更新：
    * 支持实时调整所有参数
    * 立即反馈调整效果

4. 结论
本项目通过 Web 技术实现了一个功能丰富、性能优良的经文念诵进度跟踪应用。通过木鱼模式和语音识别模式，为用户提供了灵活的进度跟踪方式。响应式设计和性能优化确保了良好的跨平台体验。未来可以考虑添加更多功能，如用户账户系统、经文注释等，进一步提升应用的实用性。
